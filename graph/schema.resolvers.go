package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"graphqllearning/graph/model"
)

// Reviews is the resolver for the reviews field.
func (r *authorResolver) Reviews(_ context.Context, obj *model.Author) ([]*model.Review, error) {
	var reviews []*model.Review
	for _, review := range r.database.Reviews() {
		if review.AuthorID == obj.ID {
			reviews = append(reviews, review.ToGraphModel())
		}
	}
	return reviews, nil
}

// Series is the resolver for the series field.
func (r *gameResolver) Series(_ context.Context, obj *model.Game) (*model.Series, error) {
	game, err := r.database.Game(obj.ID)
	if err != nil {
		return nil, err
	}
	if game.SeriesID == "" {
		return nil, nil
	}
	series, err := r.database.Series(game.SeriesID)
	if err != nil {
		return nil, err
	}
	return series.ToGraphModel(), nil
}

// Platforms is the resolver for the platforms field.
func (r *gameResolver) Platforms(_ context.Context, obj *model.Game) ([]*model.Platform, error) {
	game, err := r.database.Game(obj.ID)
	if err != nil {
		return nil, err
	}
	var platforms []*model.Platform
	for _, platformID := range game.PlatformIDs {
		platform, err := r.database.Platform(platformID)
		if err != nil {
			// for now, we just skip it. This probably means the database changed while querying, but
			// I'm not super keen on making it thread safe just yet, just want to get it working
			continue
		}
		platforms = append(platforms, platform.ToGraphModel())
	}
	return platforms, nil
}

// Reviews is the resolver for the reviews field.
func (r *gameResolver) Reviews(_ context.Context, obj *model.Game) ([]*model.Review, error) {
	var reviews []*model.Review
	for _, review := range r.database.Reviews() {
		if review.GameID == obj.ID {
			reviews = append(reviews, review.ToGraphModel())
		}
	}
	return reviews, nil
}

// Games is the resolver for the games field.
func (r *platformResolver) Games(_ context.Context, obj *model.Platform) ([]*model.Game, error) {
	var games []*model.Game
	for _, game := range r.database.Games() {
		for _, platformID := range game.PlatformIDs {
			if platformID == obj.ID {
				games = append(games, game.ToGraphModel())
			}
		}
	}
	return games, nil
}

// Reviews is the resolver for the reviews field.
func (r *queryResolver) Reviews(_ context.Context) ([]*model.Review, error) {
	var reviews []*model.Review
	for _, review := range r.database.Reviews() {
		reviews = append(reviews, review.ToGraphModel())
	}
	return reviews, nil
}

// Review is the resolver for the review field.
func (r *queryResolver) Review(_ context.Context, id string) (*model.Review, error) {
	review, err := r.database.Review(id)
	if err != nil {
		return nil, err
	}
	return review.ToGraphModel(), nil
}

// Games is the resolver for the games field.
func (r *queryResolver) Games(_ context.Context) ([]*model.Game, error) {
	var games []*model.Game
	for _, game := range r.database.Games() {
		games = append(games, game.ToGraphModel())
	}
	return games, nil
}

// Game is the resolver for the game field.
func (r *queryResolver) Game(_ context.Context, id string) (*model.Game, error) {
	game, err := r.database.Game(id)
	if err != nil {
		return nil, err
	}
	return game.ToGraphModel(), nil
}

// SeriesList is the resolver for the seriesList field.
func (r *queryResolver) SeriesList(_ context.Context) ([]*model.Series, error) {
	var seriesList []*model.Series
	for _, series := range r.database.SeriesList() {
		seriesList = append(seriesList, series.ToGraphModel())
	}
	return seriesList, nil
}

// Series is the resolver for the series field.
func (r *queryResolver) Series(_ context.Context, id string) (*model.Series, error) {
	series, err := r.database.Series(id)
	if err != nil {
		return nil, err
	}
	return series.ToGraphModel(), nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(_ context.Context) ([]*model.Author, error) {
	var authors []*model.Author
	for _, author := range r.database.Authors() {
		authors = append(authors, author.ToGraphModel())
	}
	return authors, nil
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(_ context.Context, id string) (*model.Author, error) {
	author, err := r.database.Author(id)
	if err != nil {
		return nil, err
	}
	return author.ToGraphModel(), nil
}

// Platforms is the resolver for the platforms field.
func (r *queryResolver) Platforms(_ context.Context) ([]*model.Platform, error) {
	var platforms []*model.Platform
	for _, platform := range r.database.Platforms() {
		platforms = append(platforms, platform.ToGraphModel())
	}
	return platforms, nil
}

// Platform is the resolver for the platform field.
func (r *queryResolver) Platform(_ context.Context, id string) (*model.Platform, error) {
	platform, err := r.database.Platform(id)
	if err != nil {
		return nil, err
	}
	return platform.ToGraphModel(), nil
}

// Author is the resolver for the author field.
func (r *reviewResolver) Author(_ context.Context, obj *model.Review) (*model.Author, error) {
	review, err := r.database.Review(obj.ID)
	if err != nil {
		return nil, err
	}
	author, err := r.database.Author(review.AuthorID)
	if err != nil {
		return nil, err
	}
	return author.ToGraphModel(), nil
}

// Game is the resolver for the game field.
func (r *reviewResolver) Game(_ context.Context, obj *model.Review) (*model.Game, error) {
	review, err := r.database.Review(obj.ID)
	if err != nil {
		return nil, err
	}
	game, err := r.database.Game(review.GameID)
	if err != nil {
		return nil, err
	}
	return game.ToGraphModel(), nil

}

// Games is the resolver for the games field.
func (r *seriesResolver) Games(_ context.Context, obj *model.Series) ([]*model.Game, error) {
	var games []*model.Game
	for _, game := range r.database.Games() {
		if game.SeriesID == obj.ID {
			games = append(games, game.ToGraphModel())
		}
	}
	return games, nil
}

// Author returns AuthorResolver implementation.
func (r *Resolver) Author() AuthorResolver { return &authorResolver{r} }

// Game returns GameResolver implementation.
func (r *Resolver) Game() GameResolver { return &gameResolver{r} }

// Platform returns PlatformResolver implementation.
func (r *Resolver) Platform() PlatformResolver { return &platformResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Review returns ReviewResolver implementation.
func (r *Resolver) Review() ReviewResolver { return &reviewResolver{r} }

// Series returns SeriesResolver implementation.
func (r *Resolver) Series() SeriesResolver { return &seriesResolver{r} }

type authorResolver struct{ *Resolver }
type gameResolver struct{ *Resolver }
type platformResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type reviewResolver struct{ *Resolver }
type seriesResolver struct{ *Resolver }
