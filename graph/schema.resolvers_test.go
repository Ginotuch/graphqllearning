// Almost entirely generated by ChatGPT with minor fixups by me

package graph

import (
	"context"
	"graphqllearning/graph/model"
	"graphqllearning/graph/storage"
	"testing"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

func TestGraph(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Graph Suite")
}

var _ = Describe("GraphQL Resolvers", func() {
	var (
		db *storage.InMemoryDatabase
		r  *Resolver
	)

	BeforeEach(func() {
		db = storage.NewInMemoryDatabase()
		r = &Resolver{database: db}
	})

	Describe("Queries", func() {
		Describe("Reviews", func() {
			It("returns all reviews", func() {
				authorID := db.AddAuthor("John Doe").ID
				game, _ := db.AddGame("Game One", nil, nil)
				gameID := game.ID
				db.AddReview("Great Game", "Very fun to play", 5, authorID, gameID)
				db.AddReview("Good Game", "Enjoyed the puzzles", 4, authorID, gameID)

				res, err := r.Query().Reviews(context.Background())
				Expect(err).NotTo(HaveOccurred())
				Expect(res).To(HaveLen(2))
			})
		})

		Describe("Review", func() {
			It("returns the correct review", func() {
				authorID := db.AddAuthor("Jane Doe").ID
				game, _ := db.AddGame("Game Two", nil, nil)
				gameID := game.ID
				review, _ := db.AddReview("Poor Game", "Not fun at all", 1, authorID, gameID)

				res, err := r.Query().Review(context.Background(), review.ID)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.ID).To(Equal(review.ID))
			})

			It("returns an error for a non-existent review", func() {
				_, err := r.Query().Review(context.Background(), "nonexistent")
				Expect(err).To(MatchError("review with ID nonexistent not found"))
			})
		})

		Describe("Games", func() {
			It("returns all games", func() {
				db.AddGame("Game One", nil, nil)
				db.AddGame("Game Two", nil, nil)

				res, err := r.Query().Games(context.Background())
				Expect(err).NotTo(HaveOccurred())
				Expect(res).To(HaveLen(2))
			})
		})

		Describe("Game", func() {
			It("returns the correct game", func() {
				game, _ := db.AddGame("Game One", nil, nil)

				res, err := r.Query().Game(context.Background(), game.ID)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.ID).To(Equal(game.ID))
				Expect(res.Name).To(Equal("Game One"))
			})

			It("returns an error for a non-existent game", func() {
				_, err := r.Query().Game(context.Background(), "nonexistent")
				Expect(err).To(MatchError("game with ID nonexistent not found"))
			})
		})

		Describe("SeriesList", func() {
			It("returns all series", func() {
				db.AddSeries("Series One")
				db.AddSeries("Series Two")

				res, err := r.Query().SeriesList(context.Background())
				Expect(err).NotTo(HaveOccurred())
				Expect(res).To(HaveLen(2))
			})
		})

		Describe("Series", func() {
			It("returns the correct series", func() {
				series := db.AddSeries("Series One")

				res, err := r.Query().Series(context.Background(), series.ID)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.ID).To(Equal(series.ID))
			})

			It("returns an error for a non-existent series", func() {
				_, err := r.Query().Series(context.Background(), "nonexistent")
				Expect(err).To(MatchError("series with ID nonexistent not found"))
			})
		})

		Describe("Authors", func() {
			It("returns all authors", func() {
				db.AddAuthor("Author One")
				db.AddAuthor("Author Two")

				res, err := r.Query().Authors(context.Background())
				Expect(err).NotTo(HaveOccurred())
				Expect(res).To(HaveLen(2))
			})
		})

		Describe("Author", func() {
			It("returns the correct author", func() {
				author := db.AddAuthor("Author One")

				res, err := r.Query().Author(context.Background(), author.ID)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.ID).To(Equal(author.ID))
			})

			It("returns an error for a non-existent author", func() {
				_, err := r.Query().Author(context.Background(), "nonexistent")
				Expect(err).To(MatchError("author with ID nonexistent not found"))
			})
		})

		Describe("Platforms", func() {
			It("returns all platforms", func() {
				db.AddPlatform("Platform One", "Company One")
				db.AddPlatform("Platform Two", "Company Two")

				res, err := r.Query().Platforms(context.Background())
				Expect(err).NotTo(HaveOccurred())
				Expect(res).To(HaveLen(2))
			})
		})

		Describe("Platform", func() {
			It("returns the correct platform", func() {
				platform := db.AddPlatform("Platform One", "Company One")

				res, err := r.Query().Platform(context.Background(), platform.ID)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.ID).To(Equal(platform.ID))
			})

			It("returns an error for a non-existent platform", func() {
				_, err := r.Query().Platform(context.Background(), "nonexistent")
				Expect(err).To(MatchError("platform with ID nonexistent not found"))
			})
		})
	})

	Describe("Mutations", func() {
		Context("when adding a platform", func() {
			It("adds a new platform correctly", func() {
				name := "PlayStation 5"
				company := "Sony"
				input := model.PlatformInput{Name: &name, Company: &company}
				res, err := r.Mutation().AddPlatform(context.Background(), input)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.Name).To(Equal("PlayStation 5"))
				Expect(res.Company).To(Equal("Sony"))
			})

			It("returns an error if name or company is missing", func() {
				company := "Sony"
				input := model.PlatformInput{Company: &company}
				_, err := r.Mutation().AddPlatform(context.Background(), input)
				Expect(err).To(HaveOccurred())
				Expect(err).To(MatchError("platform name and company cannot be nil"))
			})
		})

		Context("when adding a series", func() {
			It("adds a new series correctly", func() {
				name := "Series One"
				input := model.SeriesInput{Name: &name}
				res, err := r.Mutation().AddSeries(context.Background(), input)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.Name).To(Equal("Series One"))
			})

			It("returns an error if the name is not specified", func() {
				input := model.SeriesInput{}
				_, err := r.Mutation().AddSeries(context.Background(), input)
				Expect(err).To(HaveOccurred())
			})
		})

		Context("when adding a game", func() {
			It("adds a new game correctly", func() {
				seriesName := "New Series"
				seriesInput := model.SeriesInput{Name: &seriesName}
				platformName := "New Platform"
				companyName := "New Company"
				platformInput := model.PlatformInput{Name: &platformName, Company: &companyName}
				gameName := "New Game"
				gameInput := model.GameInput{Name: &gameName, Series: &seriesInput, Platforms: []*model.PlatformInput{&platformInput}}
				res, err := r.Mutation().AddGame(context.Background(), gameInput)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.Name).To(Equal("New Game"))
			})

			It("returns an error if required fields are missing", func() {
				gameInput := model.GameInput{}
				_, err := r.Mutation().AddGame(context.Background(), gameInput)
				Expect(err).To(HaveOccurred())
				//Expect(err).To(MatchError("cannot create new game with ID and other details specified together"))
			})
		})

		Context("when adding an author", func() {
			It("adds a new author correctly", func() {
				authorName := "New Author"
				authorInput := model.AuthorInput{Name: &authorName}
				res, err := r.Mutation().AddAuthor(context.Background(), authorInput)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.Name).To(Equal("New Author"))
			})

			It("returns an error if the name is not specified", func() {
				authorInput := model.AuthorInput{}
				_, err := r.Mutation().AddAuthor(context.Background(), authorInput)
				Expect(err).To(HaveOccurred())
			})
		})

		Context("when adding a review", func() {
			It("adds a new review correctly", func() {
				authorName := "Author for Review"
				authorInput := model.AuthorInput{Name: &authorName}
				gameName := "Game for Review"
				gameInput := model.GameInput{Name: &gameName}
				reviewInput := model.ReviewInput{
					Title:   "Review Title",
					Content: "Review Content",
					Rating:  5,
					Author:  &authorInput,
					Game:    &gameInput,
				}
				res, err := r.Mutation().AddReview(context.Background(), reviewInput)
				Expect(err).NotTo(HaveOccurred())
				Expect(res.Title).To(Equal("Review Title"))
				Expect(res.Content).To(Equal("Review Content"))
				Expect(res.Rating).To(Equal(5))
			})

			It("returns an error if required fields are missing", func() {
				reviewInput := model.ReviewInput{}
				_, err := r.Mutation().AddReview(context.Background(), reviewInput)
				Expect(err).To(HaveOccurred())
			})
		})
	})
})
